
Linear Search:
    A straightforward algorithm that checks each element in the list sequentially until the target is found or the end of the list is reached.

    Time Complexity: O(n), where n is the number of elements in the list. This makes it inefficient for large datasets.

Binary Search:

    A more efficient algorithm that requires the list to be sorted. It repeatedly divides the search interval in half.
    If the target value is less than the middle element, it continues the search in the lower half; otherwise, it searches in the upper half.

    Time Complexity: O(log n). This makes it much faster than linear search for large datasets.
Analysis
  Time Complexity Comparison:
  
      Linear Search: O(n) – Each book is checked one by one until the desired book is found or the list ends.
      Binary Search: O(log n) – The search space is halved with each iteration, making it much faster for large datasets.
 
When to Use Each Algorithm:
  
  Linear Search:
  
    Use when the dataset is small or unsorted.
    It is easier to implement and does not require additional sorting.

  Binary Search:
  
    Use when the dataset is large and sorted.
    It provides significant performance improvements over linear search for larger datasets.
    
